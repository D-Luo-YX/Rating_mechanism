import numpy as np
import pandas as pd
import csv
import os
from collections import defaultdict

def read_rankings(filename):
    rank_list = []
    with open(filename, 'r', encoding='utf-8') as file:
        reader = csv.reader(file)
        next(reader)
        for row in reader:
            rank_list.append(row[1])
    return rank_list


def single_matrix():
    rank_list_temp = read_rankings('Go_data/2023-01-01_to_2024-01-01/player_rankings.txt')
    print(rank_list_temp)

    # 初始化胜场矩阵和对局数据结构
    win_matrix = np.zeros((32, 32), dtype=int)
    win_record_outside = defaultdict(lambda: defaultdict(int))
    lose_record_outside = defaultdict(lambda: defaultdict(int))

    # 读取文件并处理
    input_file = 'Go_data/2023-01-01_to_2024-01-01/player_games.txt'  # 替换为你的文件路径
    with open(input_file, "r", encoding="utf-8") as file:
        for line in file:
            # 提取字段
            try:
                parts = line.strip().split(", ")
                data = {key_value.split(": ")[0]: key_value.split(": ")[1] for key_value in parts}

                player = data.get("Player")
                opponent = data.get("Opponent")
                result = data.get("Result")
            except Exception:
                continue

            # 检查玩家是否在名单中
            if player is not None and opponent is not None:
                if player in rank_list_temp:
                    player_idx = rank_list_temp.index(player)
                else:
                    player_idx = None

                if opponent in rank_list_temp:
                    opponent_idx = rank_list_temp.index(opponent)
                else:
                    opponent_idx = None

                if player_idx is not None and opponent_idx is not None:
                    if result == "胜":
                        win_matrix[player_idx, opponent_idx] += 1
                    elif result == "负":
                        win_matrix[opponent_idx, player_idx] += 1
                elif player_idx is not None:
                    if result == "胜":
                        win_record_outside[player_idx][opponent] += 1
                    elif result == "负":
                        lose_record_outside[player_idx][opponent] += 1
                elif opponent_idx is not None:
                    if result == "胜":
                        lose_record_outside[opponent_idx][player] += 1
                    elif result == "负":
                        win_record_outside[opponent_idx][player] += 1

    print("胜场矩阵:")
    print(win_matrix)
    print("胜场记录（对局名单外）:")
    print(dict(win_record_outside))
    print("负场记录（对局名单外）:")
    print(dict(lose_record_outside))
    return win_matrix, win_record_outside, lose_record_outside


def go_rating():
    M_temp,  win_temp, lose_temp= single_matrix()

if __name__ == '__main__':
    go_rating()